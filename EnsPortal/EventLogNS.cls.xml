<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="EnsPortal.EventLogNS">
<Description>
This is the Event Log page of the ZEN Ensemble application.
With namespace support</Description>
<IncludeCode>Ensemble</IncludeCode>
<Super>EnsPortal.EventLog</Super>
<System>4</System>
<TimeCreated>60310,50851.071342</TimeCreated>

<XData name="resultsPane">
<Description>
This pane displays event log activity table. User may click on a row and details are displayed to the side.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane>
<vgroup valign="top">
<!--<spacer height="5"/>-->
<tablePane id="table" 
	cellSpacing="2"
	dataSource="columns"
	tableName="Ens_Util.Log"
	useSnapshot="false"
	showZebra="true"
	valueColumn="ID"
	maxRows="1000"
	useKeys="true"
	showQuery="false"
	onselectrow="zenPage.selectItem(zenThis);"
	nowrap="true" 
	onmouseoverClass="tpMouseOver"
	enableToggleSelect="true"
	onupdate="setTimeout('zenPage.onAfterSearch();',50);"
	initialExecute="false"
	OnCreateResultSet="CheckConditions"
	unlockSession="true"
	>
<!-- provide header values for all columns so they can be localized -->
<column header="Type" colName="Type" style="text-align:left;" width="65" OnDrawCell="DrawLocalType"
        title="Alert, Assert, Error, Info, Trace, or Warning"/>
<column header="ID" colName="ID" style="text-align:left;" width="90"
		title="Log Event ID"/>
	<!--	<column header="Namespace" colName="Namespace"  style="text-align:left;" width="90"
		title="Namespace"/>		-->
<column header="Namespace" style="text-align:left;" width="90"
		title="Namespace"  OnDrawCell="DrawNamespaceCell"/>		
<column header="Time Logged" colName="TimeLogged999" id="idTimeLogged999" width="180" colExpression="{fn RIGHT(%EXTERNAL(TimeLogged),999)}"
		title="Time the event was noted in the log" hidden="true" />
<column header="Time Logged" colName="TimeLogged12" id="idTimeLogged12" width="180" colExpression="{fn RIGHT(%EXTERNAL(TimeLogged),12)}"
		title="Time the event was noted in the log" />
<column header="Session" colName="SessionId" width="90"
       title="Identifier for the session in which the event occurred"
       link=" "
        OnDrawCell="DrawSessionCell" />
<column header="Job" colName="Job" width="90"
        title="System job in which the event occurred"
        OnDrawCell="DrawMethodCell" />
<column header="Source" colName="ConfigName" width="200"
        title="Ensemble configuration name of the item that triggered the event"
        OnDrawCell="DrawMethodCell" />
<column header="Text" colName="Text" width="1200"
        title="Descriptive text logged with the event"
        OnDrawCell="DrawTextCell" />
<column colName="TraceCat" hidden="true"/>
<column colName="SourceClass" hidden="true"/>
<column colName="SourceMethod" hidden="true"/>
<!-- we will not be switching colors by user preference; we will always use zebra plus 1-column color coding -->
<condition id="condAlert" colName="Type" predicate="EQ" value="Alert" targetCol="Type" cellStyle="background: yellow; color: darkred; font-weight: bold;" />
<condition id="condError" colName="Type" predicate="EQ" value="Error" targetCol="Type" cellStyle="background: pink; color: darkred; font-weight: bold;" />
<condition id="condWarning" colName="Type" predicate="EQ" value="Warning" targetCol="Type" cellStyle="background: orange; color: darkred; font-weight: bold;" />
<condition id="condAssert" colName="Type" predicate="EQ" value="Assert" targetCol="Type" cellStyle="background: silver; color: darkred; font-weight: bold;" />
<condition id="condTrace" colName="Type" predicate="EQ" value="Trace" targetCol="Type" cellStyle="background: lightblue; color: darkblue; font-weight: bold;" />
<!-- it does not work to have a condition Type EQ Info and also have Method EQ Start/StopProduction so no condition on Type EQ Info -->
<condition id="condStart" colName="SourceMethod" predicate="EQ" value="StartProduction" targetCol="Type" cellStyle="background: lightgreen; color: darkgreen; font-weight: bold;" />
<condition id="condStop" colName="SourceMethod" predicate="EQ" value="StopProduction" targetCol="Type" cellStyle="background: lightgreen; color: darkgreen; font-weight: bold;" />
</tablePane>
<!-- set default auto refresh to "None" -->
<timer id="timer" ontimeout="zenPage.timeout(zenThis);" timeout="0"/>
</vgroup>
</pane>
]]></Data>
</XData>

<Method name="CheckConditions">
<Description><![CDATA[
Callback that is executed when creating the resultset for the main table.
The method's main purpose is to determine whether the <query>MultiType</query> class query
should be used in cases where we have the following:
<ul><li>more than one Type selected,</li>
<li>not all Types selected, and</li>
<li>no conditions on other indexed fields</li></ul>
When all of these conditions are met, we hand off responsibility for the data retrieval to the class query.]]></Description>
<FormalSpec>*pSC:%Status,pInfo:%ZEN.Auxiliary.QueryInfo</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	Do:..#CANCANCELSEARCH ..PrepareCancel()
	Set pSC = $$$OK
	Set tRS = ""
	Set tIndexCount = 0

	Set tSearchCriteria = ..GetSearchCriteria()
	Set tDefaults = $P(tSearchCriteria,"^",3)
	Set tConfigName = $S(""'=..matchSource:..matchSource, 1:$P(tDefaults,",",1))
	If (tConfigName '= "") {
		Set tIndexCount = tIndexCount + 1
	}

	Set tStartTime = $P(tDefaults,",",8)
	Set tEndTime = $P(tDefaults,",",9)
	If (tStartTime '= "") || (tEndTime '= "") {
		Set tIndexCount = tIndexCount + 1
	}

	Set tEventTypes = $P(tSearchCriteria,"^",4)
	Set tTypeCount = 0
	If tIndexCount = 0 {
		Set tEventNames = $lb("Assert","Error","Warning","Info","Trace","Alert")
		Set tTypes = ""
	}
	For i=1:1:6 {
		Set tInclude = $P(tEventTypes,",",i)
		If $S(tInclude="true":1,tInclude="false":0,1:tInclude) {
			Set tTypeCount = tTypeCount + 1
			If tIndexCount = 0 Set tTypes = tTypes _ $listbuild($listget(tEventNames,i))
		}
	}
	If tTypeCount && (tTypeCount < 6) {
		Set tIndexCount = tIndexCount + 1
		If (tTypeCount > 1) && (tIndexCount = 1) {
			Set tRS = ##class(%Library.ResultSet).%New("EnsPortal.EventLogNS:MultiType")
			#; Get inclusive StartID and EndID values
			Set tStartID = $piece(tSearchCriteria,",",6)
			Set tEndID = $piece(tSearchCriteria,",",7)
			If (tStartID && tEndID) && (tEndID < tStartID) {
				Set tTempID = tStartID
				Set tStartID = tEndID
				Set tEndID = tTempID
			}
			Set tMinID = $select(tStartID: tStartID-1, 1: "")
			Set tMaxID = $select(tEndID: tEndID+1, 1: "")
			#; Ensure that we check the table's sql to see whether there is any paging based on a condition on "ID"
			#; This is OK (for now) because the main StartID and EndID restrictions use conditions on "%ID"
			Set tTable = ..%GetComponentById("table")
			If $IsObject(tTable) && (tTable.sql '= "") {
				Set tModifiers = $piece(tTable.sql," FROM Ens_Util.Log",2)
				If (tModifiers '= "") && (tModifiers [ " WHERE ") {
					Set tWhere = $piece($piece(tModifiers," ORDER BY ID",1),"WHERE ",2)
					If (tWhere '= "") {
						For i=1:1:$length(tWhere," AND ") {
							#; remove trailing whitespace so the value is at end
							Set tCondition = $zstrip($piece(tWhere," AND ",i),">W")
							Set tProp = $piece(tCondition," ",1)
							If (tProp = "ID") {
								Set tOp = $piece($piece(tCondition,tProp_" ",2)," ",1)
								Set tVal = $piece(tCondition," ",*)
								If (tOp = "<") {
									Set tMaxID = $select(tVal = "": tMaxID, tMaxID = "": tVal, tMaxID < tVal: tMaxID, 1: tVal)
								}
								ElseIf (tOp = ">") {
									Set tMinID = $select(tVal = "": tMinID, tMinID = "": tVal, tMinID > tVal: tMinID, 1: tVal)
								}
							}
						}
					}
				}
			}
			Set tConditions = ##class(%ZEN.proxyObject).%New()
			Set tDisplayConditions = ""
			If (tMinID) {
				Set tConditions.MinID = tMinID
				Set tDisplayConditions = tDisplayConditions _ $LB("ID > "_tMinID)
			}
			If (tMaxID) {
				Set tConditions.MaxID = tMaxID
				Set tDisplayConditions = tDisplayConditions _ $LB("ID < "_tMaxID)
			}
			Set tDisplayConditions = tDisplayConditions _ $LB("Type IN ('"_$LTS(tTypes,"','")_"')")
			// Pick up any other restrictions
			Set tConditions.SourceClass = $piece(tDefaults,",",2)
			If (tConditions.SourceClass '= "") {
				Set tDisplayConditions = tDisplayConditions _ $LB("SourceClass LIKE '"_tConditions.SourceClass_"'")
			}
			Set tConditions.SourceMethod = $piece(tDefaults,",",3)
			If (tConditions.SourceMethod '= "") {
				Set tDisplayConditions = tDisplayConditions _ $LB("SourceMethod LIKE '"_tConditions.SourceMethod_"'")
			}
			Set tConditions.Text = $piece(tDefaults,",",4)
			If (tConditions.Text '= "") {
				Set tDisplayConditions = tDisplayConditions _ $LB("Text [ '"_tConditions.Text_"'")
			}
			Set tConditions.Job = $piece(tDefaults,",",5)
			If (tConditions.Job '= "") {
				Set tDisplayConditions = tDisplayConditions _ $LB("Job = '"_tConditions.Job_"'")
			}
			Set tConditions.SessionID = $piece(tDefaults,",",10)
			If (tConditions.SessionID '= "") {
				Set tDisplayConditions = tDisplayConditions _ $LB("SessionID = '"_tConditions.SessionID_"'")
			}
			Set tDescending = $select($piece(tSearchCriteria,"^",1) = "Newest First": 1, 1: 0)
			Set tDisplayConditions = tDisplayConditions _ $LB($select(tDescending: "DESC", 1: "ASC"))
			Set pSC = tRS.Execute($listtostring(tTypes),tDescending,,tConditions)
			If $$$ISERR(pSC) Quit ""
			Set pInfo.queryText = "EnsPortal.EventLog:MultiType class query; " _ $LTS(tDisplayConditions,"; ")
			Set pInfo.queryExecuted = 1
			Quit tRS
		}
	}

	Set tMaxRows = 0
	If (tIndexCount > 1) {
		Set tMaxRows = $P(tSearchCriteria,"^",5)
		If (tMaxRows = "") Set tMaxRows = 500
	}
	Set pInfo.rows = tMaxRows

	Quit tRS
]]></Implementation>
</Method>

<Method name="SaveDefaults">
<Description>
Save user's last search criteria into global for page default</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>SortOrder,TimeFormat,Defaults,EventType,MaxRows,States,AutoRefresh,NamespaceList=$Namespace</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	For p = 1:1:$L(EventType,",") Set pv=$P(EventType,",",p),$P(EventType,",",p) = $S(pv="true":1,pv="false":0,1:pv)
	For p = 1:1:$L(States,",") Set pv=$P(States,",",p),$P(States,",",p) = $S(pv="true":1,pv="false":0,1:pv)
	Set AutoRefresh = $S(AutoRefresh="true":1,AutoRefresh="false":0,1:AutoRefresh)
	s ^test(3) = NamespaceList
	Do ..SetDefaultString(SortOrder_"^"_TimeFormat_"^"_Defaults_"^"_EventType_"^"_MaxRows_"^"_States_"^"_AutoRefresh _"^"_ NamespaceList)
]]></Implementation>
</Method>

<Method name="GetSearchCriteria">
<CodeMode>expression</CodeMode>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$get(^CacheTemp.EnsPortal($Username,"EventLogNS","SearchCriteria"),"Newest First^999^^1,1,1,1,1,1^500^0,0,0,0,0^1^"_$Namespace)
]]></Implementation>
</Method>

<Method name="SetDefaultString">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDefaults:%String=""</FormalSpec>
<Private>1</Private>
<Implementation><![CDATA[
	If pDefaults = "" {
		Kill ^CacheTemp.EnsPortal($username,"EventLogNS","SearchCriteria")
	}
	Else {
		Set ^CacheTemp.EnsPortal($username,"EventLogNS","SearchCriteria") = pDefaults
	}
]]></Implementation>
</Method>

<Method name="GetAndUseDefaults">
<Description><![CDATA[
Method called from <method>%OnAfterCreatePage</method> to get defaults and build up the initial display]]></Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	do ##super()
	Set SearchCriteria = ..GetSearchCriteria()
	Set NamespceList = $P(SearchCriteria,"^",8)
]]></Implementation>
</Method>

<Method name="MultiTypeExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,pTypes:%String="",pDescending:%Boolean=1,pSelectMode:%Integer=2,pConditions:%ZEN.proxyObject=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Try {
		Set tOrder = $select(pDescending: "DESC", 1: "ASC")
		Set qHandle("dir") = $select(pDescending: -1, 1: 1)
		Set tInStatement = ##class(%SQL.Statement).%New()
		Set tInStatement.%SelectMode = 0
		Set tInSQL = "SELECT ID FROM Ens_Util.Log WHERE Type = ? "
		Set tArgs = 0
		If $IsObject(pConditions) {
			If (pConditions.MinID '= "") {
				Set tInSQL = tInSQL _ "AND ID > ? "
				Set tArgs = tArgs + 1
				Set tArgs(tArgs) = pConditions.MinID
			}
			If (pConditions.MaxID '= "") {
				Set tInSQL = tInSQL _ "AND ID < ? "
				Set tArgs = tArgs + 1
				Set tArgs(tArgs) = pConditions.MaxID
			}
		}
		Set tInSQL = tInSQL _ "ORDER BY ID "_tOrder
		Set tStatus = tInStatement.%Prepare(tInSQL)
		If $$$ISERR(tStatus) Quit
		Set tMainStatement = ##class(%SQL.Statement).%New()
		Set tMainStatement.%SelectMode = pSelectMode
		Set tMainSQL = "SELECT Type,ID,TimeLogged,SessionId,Job,ConfigName,Text,TraceCat,SourceClass,SourceMethod,$ZNSPACE As Namespace FROM Ens_Util.Log WHERE ID = ?"
		Set qHandle("mainArgs") = 0
		Set tSpecialConditions = ""
		If $IsObject(pConditions) {
			If (pConditions.Job '= "") {
				Set tSpecialConditions = tSpecialConditions _ $LB("Job = ?")
				Set qHandle("mainArgs") = qHandle("mainArgs") + 1
				Set qHandle("mainArgs",qHandle("mainArgs")) = pConditions.Job
			}
			If (pConditions.SessionID '= "") {
				Set tSpecialConditions = tSpecialConditions _ $LB("SessionId = ?")
				Set qHandle("mainArgs") = qHandle("mainArgs") + 1
				Set qHandle("mainArgs",qHandle("mainArgs")) = pConditions.SessionID
			}
			If (pConditions.SourceClass '= "") {
				Set tSpecialConditions = tSpecialConditions _ $LB("SourceClass LIKE ?")
				Set qHandle("mainArgs") = qHandle("mainArgs") + 1
				Set qHandle("mainArgs",qHandle("mainArgs")) = pConditions.SourceClass
			}
			If (pConditions.SourceMethod '= "") {
				Set tSpecialConditions = tSpecialConditions _ $LB("SourceMethod LIKE ?")
				Set qHandle("mainArgs") = qHandle("mainArgs") + 1
				Set qHandle("mainArgs",qHandle("mainArgs")) = pConditions.SourceMethod
			}
			If (pConditions.Text '= "") {
				Set tSpecialConditions = tSpecialConditions _ $LB("Text [ ?")
				Set qHandle("mainArgs") = qHandle("mainArgs") + 1
				Set qHandle("mainArgs",qHandle("mainArgs")) = pConditions.Text
			}
		}
		If $LL(tSpecialConditions) {
			Set tMainSQL = tMainSQL _ " AND " _ $LTS(tSpecialConditions," AND ")
		}
		Set tStatus = tMainStatement.%Prepare(tMainSQL)
		If $$$ISERR(tStatus) Quit
		Set qHandle("mainStmt") = tMainStatement
		Set tTypeCount = $length(pTypes,",")
		Set qHandle = 0
		For i=1:1:tTypeCount {
			Set tType = $piece(pTypes,",",i)
			If (tType '= "") && '##class(Ens.DataType.LogType).IsValid(tType) {
				Set tType = ##class(Ens.DataType.LogType).DisplayToLogical(tType)
			}
			If (tType '= "") && ##class(Ens.DataType.LogType).IsValid(tType) {
				Set tRS = tInStatement.%Execute(tType,tArgs...)
				If tRS.%Next() {
					Set qHandle = qHandle + 1
					Set qHandle("rs",qHandle) = tRS
					Set qHandle("next",tRS.ID) = qHandle
				}
			}
		}
	}
	Catch {
		Set tStatus = $$$EnsSystemError
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="MultiTypeClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="MultiTypeFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Try {
		Set Row = ""
		While (Row = "") {
			Set tNextID = $order(qHandle("next",""),qHandle("dir"),tRSPos)
			If tNextID = "" {
				Set AtEnd = 1
				Quit
			}
			Kill qHandle("next",tNextID)
			Merge tMainArgs = qHandle("mainArgs")
			Set tDataRS = qHandle("mainStmt").%Execute(tNextID,tMainArgs...)
			If tDataRS.%Next() {
				s ^test("tDataRS") = tDataRS
				Set Row = $lb(tDataRS.Type,tDataRS.ID,tDataRS.TimeLogged,tDataRS.SessionId,tDataRS.Job,tDataRS.ConfigName,tDataRS.Text,tDataRS.TraceCat,tDataRS.SourceClass,tDataRS.SourceMethod,tDataRS.TimeLogged,$piece(tDataRS.TimeLogged," ",2),tDataRS.Namespace)
			}
			s ^test("Row") = Row
			Set tCurrRS = qHandle("rs",tRSPos)
			If tCurrRS.%Next() {
				Set qHandle("next",tCurrRS.ID) = tRSPos
			}
			Else {
				Kill qHandle("rs",tRSPos)
			}
		}
	}
	Catch {
		Set tStatus = $$$EnsSystemError
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="DrawNamespaceCell">
<Description>
Server-side method to write out the event text both as content and in the hover-text title.</Description>
<FormalSpec>table:%ZEN.Component.tablePane,name:%ZEN.Datatype.string,seed:%ZEN.Datatype.string</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//Set tTxt=$ZCVT(%query("Namespace"),"O","HTML")	
	&html<<span title="#($Namespace)#" >#($Namespace)#</span>>
	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
